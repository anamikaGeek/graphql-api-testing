{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-06T05:57:04.941Z",
    "end": "2024-03-06T05:57:05.024Z",
    "duration": 83,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "858d44bc-6349-430d-b74f-673031f64506",
      "title": "",
      "fullFile": "/Users/anamikaanamika/Desktop/geekyants_internal_projects/graphql-api-testing/test/graphql.test.js",
      "file": "/test/graphql.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d4d9ada5-2732-4883-9916-f1a2fba53e09",
          "title": "GraphQL get games API",
          "fullFile": "/Users/anamikaanamika/Desktop/geekyants_internal_projects/graphql-api-testing/test/graphql.test.js",
          "file": "/test/graphql.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return title and platform",
              "fullTitle": "GraphQL get games API should return title and platform",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = `\nquery Games {\n    games {\n      id\n      title\n      platform\n    }\n  }\n  `;\nconst data = await client.request(query);\nexpect(data.games).to.be.an(\"array\");\nexpect(data.games[0]).to.have.property(\"id\");\nexpect(data.games[0]).to.have.property(\"title\");\nexpect(data.games[0]).to.have.property(\"platform\");",
              "err": {},
              "uuid": "f03fc4fd-6163-4fae-8d56-636906bc87ff",
              "parentUUID": "d4d9ada5-2732-4883-9916-f1a2fba53e09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return single game with reviews and authors",
              "fullTitle": "GraphQL get games API should return single game with reviews and authors",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = `\nquery Game($gameId: ID!) {\n    game(id: $gameId) {\n      id\n      title\n      platform\n      reviews {\n        rating\n        content\n        author {\n          name\n          verified\n        }\n      }\n    }\n  }\n  `;\nconst variables = {\n  gameId: \"1\",\n};\nconst data = await client.request(query, variables);\nexpect(data.game).to.be.an(\"object\");\nexpect(data.game).to.have.property(\"id\");\nexpect(data.game).to.have.property(\"title\");\nexpect(data.game).to.have.property(\"platform\");\nexpect(data.game).to.have.property(\"reviews\");\nexpect(data.game.reviews).to.be.an(\"array\");",
              "err": {},
              "uuid": "208e186e-571b-41a8-8b41-4bf424c35ba1",
              "parentUUID": "d4d9ada5-2732-4883-9916-f1a2fba53e09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the newly created Game",
              "fullTitle": "GraphQL get games API should return the newly created Game",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mutation = `\n    mutation Mutation($game: AddGameInput) {\n        addGame(game: $game) {\n          id\n          title\n          platform\n        }\n      }\n    `;\nconst variables = {\n  game: {\n    title: \"A title freshly Added\",\n    platform: [\"platform 1, platform 2\"],\n  },\n};\nconst data = await client.request(mutation, variables);\nexpect(data.addGame).to.be.an(\"object\");\nexpect(data.addGame).to.have.property(\"id\");\nexpect(data.addGame).to.have.property(\"title\");\nexpect(data.addGame).to.have.property(\"platform\");\nexpect(data.addGame.title).equals(variables.game.title);\nexpect(data.addGame.platform).to.be.an(\"array\");",
              "err": {},
              "uuid": "47776c98-6719-4ff0-a615-ff757146f085",
              "parentUUID": "d4d9ada5-2732-4883-9916-f1a2fba53e09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the  updated Game",
              "fullTitle": "GraphQL get games API should return the  updated Game",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mutation = `\nmutation UpdateGame($updateGameId: ID!, $edits: EditGameInput!) {\n    updateGame(id: $updateGameId, edits: $edits) {\n      id\n      title\n      platform\n    }\n  }\n    `;\nconst variables = {\n  updateGameId: \"1\",\n  edits: {\n    title: \"Updated Title\",\n    platform: [\"platform one, platform 2\"],\n  },\n};\nconst data = await client.request(mutation, variables);\nexpect(data.updateGame).to.be.an(\"object\");\nexpect(data.updateGame).to.have.property(\"id\");\nexpect(data.updateGame).to.have.property(\"title\");\nexpect(data.updateGame).to.have.property(\"platform\");\nexpect(data.updateGame.title).equals(variables.edits.title);\nexpect(data.updateGame.platform).to.be.an(\"array\");",
              "err": {},
              "uuid": "fe3ecccd-a05b-4428-95f4-69bcafe4a12b",
              "parentUUID": "d4d9ada5-2732-4883-9916-f1a2fba53e09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f03fc4fd-6163-4fae-8d56-636906bc87ff",
            "208e186e-571b-41a8-8b41-4bf424c35ba1",
            "47776c98-6719-4ff0-a615-ff757146f085",
            "fe3ecccd-a05b-4428-95f4-69bcafe4a12b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 75,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}